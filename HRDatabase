--Retrieve all employees whose address is in Elgin,IL.
SELECT F_NAME , L_NAME
FROM EMPLOYEES
WHERE ADDRESS LIKE '%Elgin, IL%';

--Retrieve all employees who were born during the 1970's.
SELECT F_NAME , L_NAME
FROM EMPLOYEES
WHERE B_DATE LIKE '197%';

--Retrieve all employees in department 5 whose salary is between 60000 and 70000.
SELECT F_NAME , L_NAME
FROM EMPLOYEES
WHERE (SALARY BETWEEN 60000 AND 70000) AND DEP_ID=5

--Retrieve a list of employees ordered by department ID.
SELECT F_NAME , L_NAME
FROM EMPLOYEES
ORDER BY DEP_ID

--Retrieve a list of employees ordered in descending order by department ID and within each department ordered alphabetically in descending order by last name.
SELECT F_NAME , L_NAME, DEP_ID
FROM EMPLOYEES
ORDER BY DEP_ID DESC, L_NAME DESC

--In SQL problem 2 (Exercise 2 Problem 2), use department name instead of department ID. Retrieve a list of employees ordered by department name, and within each department ordered alphabetically in descending order by last name.
SELECT D.DEP_NAME , E.F_NAME, E.L_NAME
FROM EMPLOYEES as E, DEPARTMENTS as D
WHERE E.DEP_ID = D.DEPT_ID_DEP
ORDER BY D.DEP_NAME, E.L_NAME DESC;


--For each department ID retrieve the number of employees in the department.
SELECT DEP_ID, COUNT(*)
AS ICARDI
FROM EMPLOYEES
GROUP BY DEP_ID;

--For each department retrieve the number of employees in the department, and the average employee salary in the department
SELECT DEP_ID, COUNT(*) AS "NUM_EMPLOYEES", AVG(SALARY) AS "AVG_SALARY"
FROM EMPLOYEES
GROUP BY DEP_ID;

--In problem above, order the result set by Average Salary
SELECT DEP_ID, COUNT(*) AS "NUM_EMPLOYEES", AVG(SALARY) AS "AVG_SALARY"
FROM EMPLOYEES
GROUP BY DEP_ID
ORDER BY AVG_SALARY;

--In problem above, limit the result to departments with fewer than 4 employees.
SELECT DEP_ID, COUNT(*) AS "NUM_EMPLOYEES", AVG(SALARY) AS "AVG_SALARY"
FROM EMPLOYEES
GROUP BY DEP_ID
HAVING COUNT(*) <4 
ORDER BY AVG_SALARY;

--Execute a failing query (i.e. one which gives an error) to retrieve all employees records whose salary is lower than the average salary.
select * from employees where salary<avg(salary)

--Execute a working query using a sub-select to retrieve all employees records whose salary is lower than the average salary.
select EMP_ID, F_NAME, L_NAME, SALARY 
from employees 
where SALARY < (select AVG(SALARY) 
                from employees;

--Execute a Column Expression that retrieves all employees records with EMP_ID, SALARY and maximum salary as MAX_SALARY in every row.
select EMP_ID, SALARY, ( select MAX(SALARY) from employees ) AS MAX_SALARY 
FROM EMPLOYEES;


--Execute a Table Expression for the EMPLOYEES table that excludes columns with sensitive employee data (i.e. does not include columns: SSN, B_DATE, SEX, ADDRESS, SALARY).
select * from ( select EMP_ID, F_NAME, L_NAME, DEP_ID from employees) AS EMP4ALL;


--Retrieve only the EMPLOYEES records that correspond to jobs in the JOBS table.
select * from employees where JOB_ID IN (select JOB_IDENT from jobs);

--Retrieve only the list of employees whose JOB_TITLE is Jr. Designer.
select * from employees where JOB_ID IN (select JOB_IDENT from jobs where JOB_TITLE= 'Jr. Designer');

--Retrieve JOB information and who earn more than $70,000.
select JOB_TITLE, MIN_SALARY,MAX_SALARY,JOB_IDENT from jobs where JOB_IDENT IN (select JOB_ID from employees where SALARY > 70000 );

--Retrieve JOB information and whose birth year is after 1976.
select JOB_TITLE, MIN_SALARY,MAX_SALARY,JOB_IDENT from jobs where JOB_IDENT IN (select JOB_ID from employees where YEAR(B_DATE)>1976 );

--Retrieve JOB information for female employees whose birth year is after 1976.
select JOB_TITLE, MIN_SALARY,MAX_SALARY,JOB_IDENT from jobs where JOB_IDENT IN (select JOB_ID from employees where YEAR(B_DATE)>1976 and (SEX)='F');

--Perform an implicit cartesian/cross join between EMPLOYEES and JOBS tables.
select * from employees, jobs;

--Retrieve only the EMPLOYEES records that correspond to jobs in the JOBS table.
select * from employees, jobs where employees.JOB_ID = jobs.JOB_IDENT;

--Redo the previous query, using shorter aliases for table names.
select * from employees E, jobs J where E.JOB_ID = J.JOB_IDENT;

--Redo the previous query, but retrieve only the Employee ID, Employee Name and Job Title.
select EMP_ID,F_NAME,L_NAME, JOB_TITLE from employees E, jobs J where E.JOB_ID = J.JOB_IDENT;

--Redo the previous query, but specify the fully qualified column names with aliases in the SELECT clause.
select E.EMP_ID,E.F_NAME,E.L_NAME, J.JOB_TITLE from employees E, jobs J where E.JOB_ID = J.JOB_IDENT;


select E.F_NAME, E.L_NAME, JH.START_DATE
from employees AS E INNER JOIN job_history AS JH ON E.EMP_ID=JH.EMPL_ID
where E.DEP_ID='5';

select E.F_NAME, E.L_NAME, JH.START_DATE, J.JOB_TITLE
from employees AS E 
INNER JOIN job_history AS JH ON E.EMP_ID=JH.EMPL_ID
INNER JOIN JOBS AS J on E.JOB_ID=J.JOB_IDENT
where E.DEP_ID='5';

SELECT E.EMP_ID, E.F_NAME, E.L_NAME, E.DEP_ID, D.DEP_NAME
FROM EMPLOYEES AS E 
LEFT OUTER JOIN DEPARTMENTS AS D ON E.DEP_ID=D.DEPT_ID_DEP;

SELECT E.EMP_ID, E.F_NAME, E.L_NAME, E.DEP_ID, D.DEP_NAME
FROM EMPLOYEES AS E 
LEFT OUTER JOIN DEPARTMENTS AS D ON E.DEP_ID=D.DEPT_ID_DEP
WHERE YEAR(E.B_DATE)<'1980';

SELECT E.EMP_ID, E.F_NAME, E.L_NAME, E.DEP_ID, D.DEP_NAME
FROM EMPLOYEES AS E 
LEFT OUTER JOIN DEPARTMENTS AS D ON E.DEP_ID=D.DEPT_ID_DEP AND YEAR(E.B_DATE)<'1980';

SELECT E.EMP_ID, E.F_NAME, E.L_NAME, D.DEP_NAME
FROM EMPLOYEES AS E 
full JOIN DEPARTMENTS AS D  ON E.DEP_ID=D.DEPT_ID_DEP AND YEAR(E.sex)='m';
